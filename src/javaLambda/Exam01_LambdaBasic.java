package javaLambda;

/*
 * ?��?��?�� ?��로그?���? ?��?��?�� ?��?�� Java 8버전�??�� Lamda�? �??��?��?��
 * 
 * Lamda?�� ?��명함?���? 만들기위?�� expression(?��)
 * �?=> 객체�??�� ?��?��보다?�� ?��?���??��?�� ?��?��?��?�� ?��?��?��?��!
 * 
 * �?
 * 기존 ?���? 개발?��?��?? Lamda?��?�� 개념?�� ?��?��?���?기�? ?���? ?��?��?�� !
 * 그럼?��?�� 불구?���?
 * java�? Lamda�? ?��?��?�� ?��?��?�� ?���? 2�?�? ?��?���? ?��각할 ?�� ?��?��?��
 * 1. 코드�? 간결?��?��?��
 * 2. Java Stream?�� ?��?��?���? ?��?��?�� ?��?���? ?��?��
 *    Java Stream?? collection(List,Map,Set,Array...)?�� 처리�? 
 *    굉장?�� ?��?��?��?���? ?�� ?�� ?��?��?�� ( 병렬처리�? �??�� )
 * 
 * ?��?��?��?�� ?��?�� 
 * (매개�??��) -> {?��?�� 코드}
 * ?��명함?���? ?��?��?��?�� ?��?���? ?��?�� ?���?�? ?��?��로는 ?��명클?��?��?�� ?��?��?��?���? ?��?��.
 * 
 * ?��?��?��?�� ?��?�� 객체�? ?��?��?��?��?��?�� ?��?��?��?�� ???��?��?�� interface �??���? ?��?�� interface?���??�� ?��?��?��?��?��!
 * 
 * thread�? ?��?�� ?��반적?�� interface�? ?��?��?��?�� ?��?��?��?���? ?��?��?�� 보아?�� 
 * 
 * */


interface  Exam01_LambdaIF {
	// 추상 method�? ?�� ?�� ?��?��?��!
	// method?�� ?��?���? ?���? ?��?���? 존재?��?���? 추상( abstact method ) method
	 void myFunc(int k);
	
}

public class Exam01_LambdaBasic {

	public static void main(String[] args) {

		// Thread�? ?��?��?��?���? ?��?�� 
		// 1. Thread?�� subclass�? ?��?��?��?�� Thread ?��?�� 
		//    그다�? 좋�? 방식?�� ?��?��?��?��!
		// 2. Runnable interface�? 구현?�� class�? ?��?��?��?�� 
		//    Thread�? ?��?��. ( ?�� 좋�? 방식 )
		// 3. Runnable interface�? 구현?�� ?���? class�? ?��?��?��?��
		//    Thread�? ?��?��. ( ?��?��로이?��?��?�� ?��반적?�� ?��?�� )
		
		  /*Runnable runnable = new Runnable() { 
		   * // 객체�? ?��?�� 못하?�� ?��?��?�� 추상 메소?���? 존재?���? ?��문인?�� 
		   * // ?�� method�? overriding?���? 객체�? ?��?��?�� ?�� ?��?��?��!
		   		@Override public void run() { 
		   		// TODO Auto-generated method stub
		  
		  } };*/
		Exam01_LambdaIF sample = 
				(int k) -> {System.out.println(" 출력?��?��!! ");};
		sample.myFunc(100);
		
	}
}
